<cfcomponent> <!--- This CFC is the root DAO CFC.  You may customize it. It will not be overwritten.  --->	<cffunction name="Commit" returntype="any" access="public" 		hint="Takes an instance of a business object, and persists the object's properties back to the database via internal CRUD methods.">				<cfargument name="ObjInstance" required="yes" 			hint="An instance of a business object to persist back to the database." />		<cfset var dataAction = "" /> 				<cfset var paramList = "" />		<cfset var paramName = "" />		<cfset var paramVal = "" />		<cfset var returnValue = "" />					<!--- Determine commit action, when key field is populated update, otherwise insert --->		<cfif ObjInstance.IsNew>			<cfset dataAction = "create" />		<cfelse>			<cfset dataAction = "update" />		</cfif>					<!--- Bind object properties to Create or Update function via CFINVOKE call --->		<cfset paramList = GetParameterList(dataAction) />		<cfinvoke method="#dataAction#" returnvariable="returnValue">			<cfloop list="#paramList#" index="paramName">				<cfset paramVal = ObjInstance.Get(paramName) />				<cfinvokeargument name="#paramName#" value="#paramVal#" />			</cfloop>		</cfinvoke> 			<!--- If CREATE, set new db id and refresh object --->		<cfif dataAction eq "create">			<cfset ObjInstance.Set(ObjInstance.KeyField,returnValue) />		</cfif>						<cfset ObjInstance.Refresh() />						</cffunction>		<!--- *********************************************************** --->	<!--- GetParameterList                                            --->	<!--- Retrieves list of parameters for a given function of CFC    --->	<!--- *********************************************************** --->		<cffunction name="GetParameterList" returntype="string" access="private" 		hint="Retrieves a list of parameters for a given function of this CFC.">				<cfargument name="FunctionName" type="string" required="yes"			hint="CFC method from which to retrieve a parameter list" />				<cfset var paramArray = "" />		<cfset var returnList = "" />		<cfset var param = "" />				<!--- Retrieve parameter array from CFC metadata --->		<cfinvoke method="GetParameterArray" returnvariable="paramArray">			<cfinvokeargument name="FunctionName" value="#arguments.FunctionName#" />		</cfinvoke>				<cfif ArrayLen(paramArray) GT 0>			<!--- Parse parameter array to string list --->			<cfloop from="1" to="#arrayLen(paramArray)#" index="param">				<cfset returnList = ListAppend(returnList,paramArray[param].name,",") />			</cfloop>		</cfif>						<cfreturn returnList />	</cffunction>		<!--- *********************************************************** --->	<!--- GetParameterArray                                           --->	<!--- Retrieves array of parameters for a given function of CFC   --->	<!--- *********************************************************** --->		<cffunction name="GetParameterArray" returntype="array" access="private" 		hint="Retrieves an array of parameters for a given function of this CFC.">				<cfargument name="FunctionName" type="string" required="yes"			hint="CFC method from which to retrieve a parameter array" />				<cfset var metaData = GetMetaData(this) />		<cfset var functionArray = metaData.extends.functions />		<cfset var returnArray = ArrayNew(1) />		<cfset var func = "" />				<!--- Loop through cfc meta data looking for given function name --->		<cfloop from="1" to="#arrayLen(functionArray)#" index="func">			<cfif CompareNoCase(functionArray[func].name,arguments.FunctionName) EQ 0>				<cfif structKeyExists(functionArray[func],"parameters")>								<cfset returnArray = functionArray[func].parameters />				</cfif>				<!--- After finding function & grabbing parameters, exit the function search loop --->				<cfbreak />			</cfif>		</cfloop>				<cfreturn returnArray />	</cffunction>	</cfcomponent>
